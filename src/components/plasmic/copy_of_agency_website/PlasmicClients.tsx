// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h64FJUinfLsT3oJv18qEKw
// Component: yT2eR_HuSciw

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: h2Z0y8j3p_XM/component
import Client from "../../Client"; // plasmic-import: tfh3uRYjbjAy/component
import HomeFooterTop from "../../HomeFooterTop"; // plasmic-import: EE1u5reRX2Fo/component
import FooterMain from "../../FooterMain"; // plasmic-import: EEpzYH0J7Tm2/component

import { useScreenVariants as useScreenVariantsuLgfdXaUnlx8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uLgfdXaUNLX8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: h64FJUinfLsT3oJv18qEKw/projectcss
import sty from "./PlasmicClients.module.css"; // plasmic-import: yT2eR_HuSciw/css

import airbnbSvgRWwa3MZofmRe from "./images/airbnbSvg.svg"; // plasmic-import: RWwa3mZOFMRe/picture
import asanaSvg3TLtMiEtUmZ from "./images/asanaSvg.svg"; // plasmic-import: 3TLtMiETUm_Z/picture
import disneySvgDYo1K0Bh7UGk from "./images/disneySvg.svg"; // plasmic-import: DYo1k0bh7UGk/picture
import instacartSvgOttpxZa16L3I from "./images/instacartSvg.svg"; // plasmic-import: ottpxZA16l3I/picture

createPlasmicElementProxy;

export type PlasmicClients__VariantMembers = {};
export type PlasmicClients__VariantsArgs = {};
type VariantPropType = keyof PlasmicClients__VariantsArgs;
export const PlasmicClients__VariantProps = new Array<VariantPropType>();

export type PlasmicClients__ArgsType = {};
type ArgPropType = keyof PlasmicClients__ArgsType;
export const PlasmicClients__ArgProps = new Array<ArgPropType>();

export type PlasmicClients__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  banner?: Flex__<"div">;
  foreground2?: Flex__<"div">;
  h1?: Flex__<"h1">;
  text?: Flex__<"div">;
  clientsSection5?: Flex__<"div">;
  footerTopSection?: Flex__<"div">;
  homeFooterTop?: Flex__<typeof HomeFooterTop>;
  footerMain?: Flex__<typeof FooterMain>;
};

export interface DefaultClientsProps {
  className?: string;
}

const $$ = {};

function PlasmicClients__RenderFunc(props: {
  variants: PlasmicClients__VariantsArgs;
  args: PlasmicClients__ArgsType;
  overrides: PlasmicClients__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuLgfdXaUnlx8()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"banner"}
            data-plasmic-override={overrides.banner}
            className={classNames(projectcss.all, sty.banner)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kVqaO)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Clients"
                    : "Clients"}
                </h1>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Lorem Ipsum is simply dummy text of the printing and typesetting "
                    : "Lorem Ipsum is simply dummy text of the printing and typesetting "}
                </div>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__fdkl1)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__skAZe)}
            >
              <div className={classNames(projectcss.all, sty.column__maZf4)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lj0GR)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__aCcs7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__asWWl)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__stkDx
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___5IMkq
                          )}
                        >
                          {"Client name"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__lqdDk)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jAwP0)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__tfWOt)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__zkNqo)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__sskFb
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__p5HhU
                          )}
                        >
                          {"Client name 2"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__poymY)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bhAe5)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__bT41Z)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__l7MhY)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__wmfMf
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2___3Pv9W
                          )}
                        >
                          {"Client name"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__dBegx)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__e3ZMf)}
                >
                  <div
                    className={classNames(projectcss.all, sty.columns__kclov)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__yk9Bc)}
                    >
                      <Client
                        className={classNames(
                          "__wab_instance",
                          sty.client__hspO2
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__rsYab
                          )}
                        >
                          {"Client name"}
                        </h2>
                      </Client>
                    </div>
                  </div>
                </Stack__>
              </div>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"clientsSection5"}
            data-plasmic-override={overrides.clientsSection5}
            hasGap={true}
            className={classNames(projectcss.all, sty.clientsSection5)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vMKke)}
            >
              <div className={classNames(projectcss.all, sty.columns__bpA8A)}>
                <div className={classNames(projectcss.all, sty.column__loAMb)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__zPdGy
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "More client's we've worked with"
                      : "More client's we've worked with"}
                  </h2>
                </div>
                <div className={classNames(projectcss.all, sty.column__tguIb)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0ZR6M)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kc2Mr)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__xzirS)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: airbnbSvgRWwa3MZofmRe,
                          fullWidth: 300,
                          fullHeight: 96,
                          aspectRatio: 3.125
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__k4BZw)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: asanaSvg3TLtMiEtUmZ,
                          fullWidth: 300,
                          fullHeight: 62,
                          aspectRatio: 4.863636
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__g0Fh2)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: disneySvgDYo1K0Bh7UGk,
                          fullWidth: 300,
                          fullHeight: 124,
                          aspectRatio: 2.41655
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__g6P8S)}
                        displayHeight={"48px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: instacartSvgOttpxZa16L3I,
                          fullWidth: 300,
                          fullHeight: 60,
                          aspectRatio: 4.961538
                        }}
                      />
                    </Stack__>
                  </div>
                </div>
              </div>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <HomeFooterTop
              data-plasmic-name={"homeFooterTop"}
              data-plasmic-override={overrides.homeFooterTop}
              className={classNames("__wab_instance", sty.homeFooterTop)}
            />
          </div>
          <FooterMain
            data-plasmic-name={"footerMain"}
            data-plasmic-override={overrides.footerMain}
            className={classNames("__wab_instance", sty.footerMain)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "banner",
    "foreground2",
    "h1",
    "text",
    "clientsSection5",
    "footerTopSection",
    "homeFooterTop",
    "footerMain"
  ],
  header: ["header"],
  banner: ["banner", "foreground2", "h1", "text"],
  foreground2: ["foreground2", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  clientsSection5: ["clientsSection5"],
  footerTopSection: ["footerTopSection", "homeFooterTop"],
  homeFooterTop: ["homeFooterTop"],
  footerMain: ["footerMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  banner: "div";
  foreground2: "div";
  h1: "h1";
  text: "div";
  clientsSection5: "div";
  footerTopSection: "div";
  homeFooterTop: typeof HomeFooterTop;
  footerMain: typeof FooterMain;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClients__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicClients__VariantsArgs;
    args?: PlasmicClients__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicClients__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicClients__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClients__ArgProps,
          internalVariantPropNames: PlasmicClients__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClients__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClients";
  } else {
    func.displayName = `PlasmicClients.${nodeName}`;
  }
  return func;
}

export const PlasmicClients = Object.assign(
  // Top-level PlasmicClients renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    banner: makeNodeComponent("banner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    clientsSection5: makeNodeComponent("clientsSection5"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    homeFooterTop: makeNodeComponent("homeFooterTop"),
    footerMain: makeNodeComponent("footerMain"),

    // Metadata about props expected for PlasmicClients
    internalVariantProps: PlasmicClients__VariantProps,
    internalArgProps: PlasmicClients__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Clients",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicClients;
/* prettier-ignore-end */
