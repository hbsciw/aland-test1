// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h64FJUinfLsT3oJv18qEKw
// Component: EE1u5reRX2Fo

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsuLgfdXaUnlx8 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uLgfdXaUNLX8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: h64FJUinfLsT3oJv18qEKw/projectcss
import sty from "./PlasmicHomeFooterTop.module.css"; // plasmic-import: EE1u5reRX2Fo/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: IAR87SPTSIgk/icon

createPlasmicElementProxy;

export type PlasmicHomeFooterTop__VariantMembers = {};
export type PlasmicHomeFooterTop__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeFooterTop__VariantsArgs;
export const PlasmicHomeFooterTop__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeFooterTop__ArgsType = {};
type ArgPropType = keyof PlasmicHomeFooterTop__ArgsType;
export const PlasmicHomeFooterTop__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeFooterTop__OverridesType = {
  root?: Flex__<"div">;
  foreground3?: Flex__<"div">;
  h2?: Flex__<"h2">;
  button?: Flex__<"button">;
};

export interface DefaultHomeFooterTopProps {
  className?: string;
}

const $$ = {};

function PlasmicHomeFooterTop__RenderFunc(props: {
  variants: PlasmicHomeFooterTop__VariantsArgs;
  args: PlasmicHomeFooterTop__ArgsType;
  overrides: PlasmicHomeFooterTop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuLgfdXaUnlx8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zskJ9)}>
        <Stack__
          as={"div"}
          data-plasmic-name={"foreground3"}
          data-plasmic-override={overrides.foreground3}
          hasGap={true}
          className={classNames(projectcss.all, sty.foreground3)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___283Km)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Take your business to the next level"
                : "Work with us."}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rLive
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Rapidiously revolutionize future-proof niches, and authoritatively \nrestore user-centric e-markets."
                : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tKShV)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qPokV)}
            >
              <Stack__
                as={"button"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  sty.button
                )}
              >
                {false ? (
                  <Icon29Icon
                    className={classNames(projectcss.all, sty.svg__qzJjG)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fdaji
                  )}
                >
                  {"Get IN Touch"}
                </div>
                {false ? (
                  <Icon29Icon
                    className={classNames(projectcss.all, sty.svg__fLrJ9)}
                    role={"img"}
                  />
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "foreground3", "h2", "button"],
  foreground3: ["foreground3", "h2", "button"],
  h2: ["h2"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  foreground3: "div";
  h2: "h2";
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeFooterTop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeFooterTop__VariantsArgs;
    args?: PlasmicHomeFooterTop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeFooterTop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomeFooterTop__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomeFooterTop__ArgProps,
          internalVariantPropNames: PlasmicHomeFooterTop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomeFooterTop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeFooterTop";
  } else {
    func.displayName = `PlasmicHomeFooterTop.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeFooterTop = Object.assign(
  // Top-level PlasmicHomeFooterTop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground3: makeNodeComponent("foreground3"),
    h2: makeNodeComponent("h2"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicHomeFooterTop
    internalVariantProps: PlasmicHomeFooterTop__VariantProps,
    internalArgProps: PlasmicHomeFooterTop__ArgProps
  }
);

export default PlasmicHomeFooterTop;
/* prettier-ignore-end */
